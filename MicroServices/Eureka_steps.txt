Eureka Server and Client (project demo steps)
	Spring cloud
		eureka server and client
		feign client			to access a rest api from another spring boot application
		ribbon

 - we are going to register a rest api in eureka server

 - while creating a spring boot application, we can choose dependencies 
	eureka server / client

 - 8761 is the port on which eureka server runs.		(convention)

----------------Steps---------

1) Create new Workspace as "Eureka-Server" 

2) Create new starter project name "ex: eureka-server " : add 1 dependencies - "Eureka Server"
     -below dependency created in pom.xml when we add "Eureka Server"
               
                <dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
		</dependency>

3) Open main (EurekaServerApplication.java) : add annotations
     
	@SpringBootApplication
	@EnableEurekaServer

4) Open (application.properties) : add below configurations (eureka server uses 8761 port generally)

     	eureka.client.registerWithEureka = false
	eureka.client.fetchRegistry = false
	server.port = 8761

5) Run the application as "SpringBootApplication" : test server using url - by default shows no instances
     
        URL: http://localhost:8761/ 
  
----------

6) Create another workspace as "Eureka-Client-1" 

7) Create starter project as "ex: eureka-client-1" : add dependency -"Eureka Discovery Client" , spring-web
     -below dependency created in pom.xml automatically when we add "Eureka Discovery Client"
              
               <dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>

8) 4) Open (application.properties) : add below configurations 
                         -(eureka-client uses any port (8XXX) ex: 8383 using for (eureka-client1 generally)
                         - we can set application.name & context-path according to our eureka-client project

	server.port=8383
	spring.application.name=account-service
	eureka.instance.hostname=localhost
	eureka.client.serviceUrl.defaultZone=http://${eureka.instance.hostname}:8761/eureka/
	server.context-path=/account

     
5) Open main (EurekaClient1Application.java) : add annotations
     
	@SpringBootApplication
	@EnableEurekaClient

   if you forget to add "spring-web" while creating project ,add below dependency directly in pom.xml

               <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

6) Create sample RestController class (AccountController.java): as below

     @RestController
	public class AccountController {

	@GetMapping("/")
	public String home() {
		return "Hello welcome to Account Service of eureka-client-1";
	}
     }

7) Run the application as "SpringBootApplication" : 
     
    now, open same previous eureka-server using -> URL: http://localhost:8761/
    -by default no instance available before, when u run the eureka-client-1 project then one instance is added (application name: ACCOUNT-SERVICE) in eurela-server

8) check localhost(for REST):
           http://localhost:8383/account

-------------

now create another eureka-client-2 in another workspace (same above steps repeated again)

6) Create another workspace as "Eureka-Client-2" 

7) Create starter project as "ex: eureka-client-2" : add dependency -"Eureka Discovery Client" , spring-web
     -below dependency created in pom.xml automatically when we add "Eureka Discovery Client"
              
               <dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>

8) 4) Open (application.properties) : add below configurations 
                         (eureka-client uses any port (8XXX) ex: 8384 using another ports for (eureka-client-2) )

	server.port=8384
	spring.application.name=employee-service
	eureka.instance.hostname=localhost
	eureka.client.serviceUrl.defaultZone=http://${eureka.instance.hostname}:8761/eureka/
	server.context-path=/employee

     
9) Open main (EurekaClient1Application.java) : add annotations
     
	@SpringBootApplication
	@EnableEurekaClient

   if you forget to add "spring-web" while creating project ,add below dependency directly in pom.xml

               <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

10) Create sample RestController class (AccountController.java): as below

     @RestController
	public class AccountController {

	@GetMapping("/")
	public String home() {
		return "Hello welcome to Account Service of eureka-client-1";
	}
     }

   -we can create sample RestController in main class also or we create new class 

11) Run the application as "SpringBootApplication" : 
     
    now, open same previous eureka-server using -> URL: http://localhost:8761/
    -by default no instance available before, 
                    when u run the "eureka-client-1 project" then one instance is added (application name: ACCOUNT-SERVICE) in eureKa-server
                    when u run the "eureka-client-2 project" then another instance is added (application name: EMPLOYEE-SERVICE) in eureKa-server

12) check localhost(for REST):
           http://localhost:8384/employee

=================

13) when we add actuator dependency abovve 2 (eureka-client prjects) in pom.xml:
   	  
            <dependency>
	   		 <groupId>org.springframework.boot</groupId>
			 <artifactId>spring-boot-starter-actuator</artifactId>
	   </dependency>
   
  USE url(eureka-client-1): http://localhost:8383/actuator/
      url(eureka-client-2): http://localhost:8384/actuator/
                      
                                      or (click on below status & remove /info in address bar)                
      
	 Application		AMIs		Availability Zones	    				Status
	ACCOUNT-SERVICE		n/a (1)			(1)				UP (1) - DESKTOP-8USD2UH:account-service:8383
	EMPLOYEE-SERVICE	n/a (1)			(1)				UP (1) - DESKTOP-8USD2UH:employee-service:8384
 
  Actuator :
  --------   we get the meta data of the information about our instances or moniter and manages the springboot application

-----------------
 - We have created eureka-server in one workspace & two eureka-client projects in 2 sepearte workspaces..for easy debugging
   we can create two or more eureka-clients in one workspace  & as well
   we can create both eureka-server & all eureka-client projects in same workspace ....we can do anything

 - In eureka-server instances will show as UP - when eureka-client projects are running background & shows DOWN - when client proj not running



----------------
  URLS: http://localhost:8761/             (eureka-server)
        http://localhost:8383/account      (eureka-client-1 ->  REST Controller checking)
        http://localhost:8384/employee     (eureka-client-2 ->  REST Controller checking)
        http://localhost:8383/actuator/    (meta data info of instances -> eureka-client 1)
        http://localhost:8384/actuator/    (meta data info of instances -> eureka-client 2)
 
 

======================================================================================Cloud service sir notes================================================================================

---------------------------------


IAAS		Infrastructure as a Service
PAAS		Platform as a service
SAAS		Software as a service


we have create a project (web application)
so we need to upload the project in a server

so that anybody from anywhere  in the world can access it

localhost means only in this computer

upskillit.com
something.com
	this will map to ip address and port number

2 strategies:
1) we have own servers
2) we hire servers

own server means, we need huge infrastructure

localhost:8080

in next or another computer
	we used to enter ip address of that computer
	and access that web app from other computer also

http://192.168.2.58:8080

in LAN we are able to access within local network

but in server, anybody can access

that makes lot of users to access

due to more number of users, the performance of the application is affected.
to improve performance, we need to improve the infrastructure
	by increasing number of processors 

everytime, the demand increases, we are forced to upgrade our infrastructure

on weekends, bookmyshow app is used heavily
on weekdays, it is very less

on more demand, we buy more infra, means, when demand is less? we cannot downgrade our infra

Scalability
	is the ability to provision or deprovision based on my necessaity

Own infra is rigid
	our infra does not change to changing needs
	and sudden increase of users, cannot be scaled by infra. 
	It takes time to upgrade infra.		NOT Agile
	Agility 

We need to find a solution.
IAAS
-----

2004	google had a cluster of 40000 processors

searching for a file in our own hard disk took around 4 minutes
searching an info in google took around 0.004 seconds		(google is not present in our computer)


clustered server
cluster
	Nodes					node can be compared to CPU
		PODS			
			container
				

Cloud and Database

db
	storage

cloud
	storage
	compute
	

The three basic types of cloud services are:

Computing			containers			we deploy our rest api, mvc in cloud
Storage
Networking


private
public
hybrid			combination of private and public


Cloud Service Providers	
	
Microsoft Azure
Google	GCP
Amazon 	AWS



hOW TO deploy our applications in aws?
1) elastic beanstalk
	upload .jar or .war

2) ECS and EKS
	Elastic Container Service
	Elastic Kubernetes Service


 